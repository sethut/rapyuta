#!/bin/bash

STARTTIME="$(date -u --iso-8601=ns)"

DOCKER_PY_VER="3.1.3"
DOCKER_COMPOSE_VER="1.21.0"
IS_ROS=false
SALT_GRAINS="/etc/salt/grains"
RUNTIME="preinstalled"
CATKIN_WS=""
KEYSERVER="hkp://p80.pool.sks-keyservers.net:80"
DOCKER_GPG_KEY="9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
RAPYUTA_VENV="/opt/rapyuta/venv"
RAPYUTA_VENV_ACT="${RAPYUTA_VENV}/bin/activate"
ERR_LOG_FILE="/var/log/rapyuta_error_log"
INSTALL_LOG_FILE="/var/log/rapyuta_install_log"
OS="ubuntu"
LSB_RELEASE="xenial"
DOCKER_CE_PKG="17.12.1~ce-0~$OS"
DOCKER_CE_LIST="/etc/apt/sources.list.d/docker-ce.list"
CURRENTPROGRESS=0
ARTIFACTS="https://storage.googleapis.com/artifacts.rapyuta.io/wheels"

SALT_WHL="${ARTIFACTS}/salt-2017.7.0_n_a_bfac47fd01-py2-none-any.whl"
CRYPTO_AMD64_WHL="${ARTIFACTS}/cryptography-1.2.3-cp27-cp27mu-linux_x86_64.whl"
CRYPTO_ARM64_WHL="${ARTIFACTS}/cryptography-1.2.3-cp27-cp27mu-linux_aarch64.whl"
CRYPTO_ARM32_WHL="${ARTIFACTS}/cryptography-1.2.3-cp27-cp27mu-linux_armv7l.whl"
CFFI_AMD64_WHL="${ARTIFACTS}/cffi-1.12.2-cp27-cp27mu-linux_x86_64.whl"
CFFI_ARM64_WHL="${ARTIFACTS}/cffi-1.12.2-cp27-cp27mu-linux_aarch64.whl"
CFFI_ARM32_WHL="${ARTIFACTS}/cffi-1.12.2-cp27-cp27mu-linux_armv7l.whl"
PYCRYPTO_AMD64_WHL="${ARTIFACTS}/pycrypto-2.6.1-cp27-cp27mu-linux_x86_64.whl"
PYCRYPTO_ARM64_WHL="${ARTIFACTS}/pycrypto-2.6.1-cp27-cp27mu-linux_aarch64.whl"
PYCRYPTO_ARM32_WHL="${ARTIFACTS}/pycrypto-2.6.1-cp27-cp27mu-linux_armv7l.whl"
ZMQ_AMD64_WHL="${ARTIFACTS}/pyzmq-15.2.0-cp27-cp27mu-manylinux1_x86_64.whl"
ZMQ_ARM64_WHL="${ARTIFACTS}/pyzmq-15.2.0-cp27-cp27mu-linux_aarch64.whl"
ZMQ_ARM32_WHL="${ARTIFACTS}/pyzmq-15.2.0-cp27-cp27mu-linux_armv7l.whl"
PYTHON=""

CPUARCH_AMD64="amd64"
CPUARCH_ARM64="arm64"
CPUARCH_ARM32="armhf"
CPUARCH="$(uname -m)" # later updated to one of the above enums

declare -a jobs=("install_system_deps" "init_venv" "install_salt")
declare -A grains

function run_command() {
  $@ 1>>"$INSTALL_LOG_FILE" 2>>"$ERR_LOG_FILE"
  if [ $? != 0 ]; then
    cat<<EOM
Error occurred while running: ${@}
Please check ${ERR_LOG_FILE} for more details.

You must:
 * Ensure device has an active internet connection (ping 8.8.8.8)
 * Ensure there is adequate disk space on device (df -h)
Try re-onboarding the device. If issue persists please contact support at: support@rapyuta.io
EOM
    exit -1
  fi
}

function log_command() {
  $@ 1>> $INSTALL_LOG_FILE 2>> $ERR_LOG_FILE
}

function print_progress_bar(){
  ch='#'
  size=10
  b=$(( $1 / $size ))
  CURRENTPROGRESS=$1
  printf '%*s' "$b" | tr ' ' "$ch"
  printf '%*s' "$((size - b))"
  printf '(%d%%)\r' $1
}

function add_timing_grains(){
   TOTAL_INSTALL_TIME=$(($(date -u +%s) - $(date -d "$STARTTIME" -u +%s)))
   add_grains install_script_duration $TOTAL_INSTALL_TIME
   add_grains install_start_time $STARTTIME
}

function run_jobs() {
  for job in ${jobs[@]}
  do
  	$job
  done
}

function wait_for_lock(){
    sp="/-\|"
    if check_command_exists fuser; then
        CHECK_COMMAND="fuser /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock &> /dev/null"
    else
        CHECK_COMMAND="pgrep -l apt > /dev/null 2>&1 "
    fi
    if eval ${CHECK_COMMAND} ; then
        echo -ne 'Waiting for apt lock  '
    else
        return 0
    fi
    while eval $CHECK_COMMAND; do
        printf "\b${sp:i++%${#sp}:1}"
        sleep 1
    done
    echo -e "\033[1K"
    print_progress_bar $CURRENTPROGRESS
}

check_command_exists() {
    command -v "$1" > /dev/null 2>&1
}


function print_rr_banner() {
    echo 'IF9fX18gICAgICAgICAgICAgICAgICAgICAgICAgXyAgICAgICAgICBfX19fICAgICAgIF8gICAgICAgICAgIF8gICBfICAgICAgICAgIA0KfCAgXyBcIF9fIF8gXyBfXyAgXyAgIF8gXyAgIF98IHxfIF9fIF8gIHwgIF8gXCBfX18gfCB8X18gICBfX18gfCB8XyhfKSBfX18gX19fIA0KfCB8XykgLyBfYCB8ICdfIFx8IHwgfCB8IHwgfCB8IF9fLyBfYCB8IHwgfF8pIC8gXyBcfCAnXyBcIC8gXyBcfCBfX3wgfC8gX18vIF9ffA0KfCAgXyA8IChffCB8IHxfKSB8IHxffCB8IHxffCB8IHx8IChffCB8IHwgIF8gPCAoXykgfCB8XykgfCAoXykgfCB8X3wgfCAoX19cX18gXA0KfF98IFxfXF9fLF98IC5fXy8gXF9fLCB8XF9fLF98XF9fXF9fLF98IHxffCBcX1xfX18vfF8uX18vIFxfX18vIFxfX3xffFxfX198X19fLw0KICAgICAgICAgICB8X3wgICAgfF9fXy8gICAgICAgICAgICAgICAgDQoNCg==' | base64 -d
}


function run_as_sudoer() {
  [ "$UID" -eq 0 ] || exec sudo "$0" "$@"
}

function update_grains() {
    log_command touch $SALT_GRAINS
    for key in ${!grains[@]}; do
        echo ${key}: ${grains[${key}]} >> $SALT_GRAINS
    done
}

function remove_grains(){
    log_command rm $SALT_GRAINS
}

function add_grains() {
  key=$1
  value=$2
  grains[$key]+=$value
}

function check_running_deployment() {
  EXECUTABLES=$(docker ps -q --filter name=inst-* 2> /dev/null)
  if [ ! -z $EXECUTABLES ]; then
    echo "Deployments are still running for this device. Deprovision them and try again."
    exit -1
  fi

  if [ -f "$RAPYUTA_VENV_ACT" ]; then
    source "$RAPYUTA_VENV_ACT"
    if supervisorctl status all 2> /dev/null | grep -q "RUNNING"; then
      echo "Deployments are still running for this device. Deprovision them and try again."
      exit -1
    fi
  fi
}

function install_system_deps () {
  print_progress_bar 5
  if hash dpkg-query 2>/dev/null; then
    wait_for_lock
    log_command apt-get update
    deps="virtualenv psmisc"
    for dep in $deps ; do
      dpkg-query -W -f='${Package}\n' | grep ^$dep$ > /dev/null 2>&1
      if [ $? != 0 ]; then
        wait_for_lock
        log_command apt-get install -y $dep
      fi
    done
  fi
}

function validate_and_set_python() {
  declare -a python_bins=("/usr/bin/python2" "/usr/bin/python")
  for python_bin in "${python_bins[@]}"; do
    if [ -f "$python_bin" ]; then
      PYTHON=$python_bin
      break
    fi
  done
  if [ -z "$PYTHON" ]; then
    echo -ne "Couldn't find python binary on your system. Looked at: ${python_bins[@]}\n"
    echo -ne "Please install python and ensure it's in one of the above locations.\n\n"
    exit -1;
  fi
  version=$("$PYTHON" <<EOM
from __future__ import print_function
from platform import python_version
from distutils.version import LooseVersion
if LooseVersion('2.7.9') <= python_version() < LooseVersion('3'):
  print('valid')
else:
  print(python_version())
EOM
  )
  if [ "$version" != "valid" ]; then
    echo -ne "Invalid python version: $version at $PYTHON\n"
    echo -ne "Required version: >=2.7.9,<3\n\n"
    exit -1;
  fi
}

function check_init_manger() {
    init=`strings /sbin/init |
      awk 'match($0, /(upstart|systemd|sysvinit)/) { print tolower(substr($0, RSTART, RLENGTH));exit; }'`

    if [ $init == $1 ]; then
        return 1
    else
        return 0
    fi
} # e.g.: check_init_manager systemd

function set_ros_workspace() {
  if ! [[ -z $CATKIN_WS ]]; then
    if ! [[ -d $CATKIN_WS ]]; then
      echo "Directory $CATKIN_WS not found."
      echo "To set default catkin workspace. Use: bash $0 -w <path-to-catkin_ws>"
      exit -1
    fi
    add_grains "ros_workspace" $CATKIN_WS
  fi
}

function add_docker_gpg_key() {
  log_command apt-key adv --keyserver $KEYSERVER --recv-keys $DOCKER_GPG_KEY
}

function validate_and_set_cpuarch() {
  case "$CPUARCH" in
  x86_64|amd64)
    CPUARCH=$CPUARCH_AMD64
    ;;
  aarch64*)
    CPUARCH=$CPUARCH_ARM64
    ;;
  armv7*)
    CPUARCH=$CPUARCH_ARM32
    ;;
  *)
    echo -ne "CPU architecture $CPUARCH not supported. Aborting.. \n\n"
    exit -1;
  esac
}

function add_docker_deb_repo() {
  cat <<EOM >$DOCKER_CE_LIST
deb [arch="$CPUARCH"] https://download.docker.com/linux/$OS $LSB_RELEASE stable
EOM
  pre_reqs="apt-transport-https ca-certificates"
  wait_for_lock
  log_command apt-get install -y -qq $pre_reqs
  add_docker_gpg_key
}

function install_docker() {
  if [ ! -f $DOCKER_CE_LIST ]; then
    add_docker_deb_repo
    wait_for_lock
    log_command apt-get update
  fi
  print_progress_bar 60
  docker_version_command='dpkg-query --showformat='\''${Version}'\'' --show docker-ce'
  docker_version=$(${docker_version_command} 2>&1)
  if [[ $? -eq 0 ]]  && [[ ${docker_version} != "'${DOCKER_CE_PKG}'" ]]; then
    echo "Warning! docker-ce version on this device is being changed."
    print_progress_bar 60
  fi
  wait_for_lock
  if ! $(log_command apt-get -y --allow-downgrades install docker-ce=$DOCKER_CE_PKG); then
      echo -ne 'Unable to install docker-ce. Aborting.. \n\n'
      exit -1;
  fi
  log_command apt-mark hold docker-ce
}

function install_docker_py() {
  if ! $(log_command pip install "docker==$DOCKER_PY_VER"); then
      echo -ne 'Unable to install docker_py version:$DOCKER_PY_VER. Aborting.. \n\n'
      exit -1;
  fi
}

function install_docker_compose() {
  if ! $(log_command pip install "docker_compose==$DOCKER_COMPOSE_VER"); then
      echo -ne 'Unable to install docker_compose version:$DOCKER_COMPOSE_VER. Aborting.. \n\n'
      exit -1;
  fi
}

function add_rapyuta_image_token_in_grain() {
    add_grains "rapyuta_registry_token" dW51c2VkOmV5SmhiR2NpT2lKU1V6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnJkV0psY201bGRHVnpMM05sY25acFkyVmhZMk52ZFc1MElpd2lhM1ZpWlhKdVpYUmxjeTVwYnk5elpYSjJhV05sWVdOamIzVnVkQzl1WVcxbGMzQmhZMlVpT2lKeWFXOHRjSEp2YW1WamRDMXZaV1Z1YlhKMVkzUmljRzlxYVhaNmQyaGxhR2xzZG5vaUxDSnJkV0psY201bGRHVnpMbWx2TDNObGNuWnBZMlZoWTJOdmRXNTBMM05sWTNKbGRDNXVZVzFsSWpvaWNuSXRaR1YyYVdObExUSXdOV1F6TVRSbExUSmhaV1l0TkdVell5MWlOamd6TFdGaU9ETm1PREE0T0dZNVlpSXNJbXQxWW1WeWJtVjBaWE11YVc4dmMyVnlkbWxqWldGalkyOTFiblF2YzJWeWRtbGpaUzFoWTJOdmRXNTBMbTVoYldVaU9pSnlZWEI1ZFhSaExXbHRZV2RsTFhCMWJHeGxjaUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbVV6TnpVMFpUbGpMVGMxTjJZdE1URmxPUzFoWWprd0xUQXdNR1F6WVRVeE5UWTBPQ0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERweWFXOHRjSEp2YW1WamRDMXZaV1Z1YlhKMVkzUmljRzlxYVhaNmQyaGxhR2xzZG5vNmNtRndlWFYwWVMxcGJXRm5aUzF3ZFd4c1pYSWlmUS5QWldsWGcwTGItZVJLcElrdjVVSmpuNjdDek5DSk9Fd3pZWjV4U3E5LV80Y1FpRGQ4SzNlSkJ6em0zdUFYbzJyV3NlVmZzT0dsSG1RNEJFcDRzQl9TMlpwUjhuYXUyTUN6bGQ1TFBLRTc3SDE4YnNQeVg2VU5CSDBpNzBpb0ZfT1BYS1djemNGbXRKem9uT3RXcHhxMHlncXpVT21ZOWtVUHZMdFN4eDlSSEdQV1dQWmJCZWNkLWJ1V205aC0zVklRSjMyMFJ6XzRtUDJmMllRbjRXQUF2MF9WMkxwUHdDQ3FJWlBxaEdWemhhTFJmb0IzcFViZS1Ec3VsYkFLZ0dsR0M3V084SUlvS0gxLUdQSVNyenRVYUlLT2dpb19vX2x4MEVIb21QdzFLWVpJTkVNTTJ5VXdoQ1IzcGFqRTdZMWZGeFpDRWJBWVBUY0dQZ2JrV2NoaWc=
}

function install_docker_runtime() {
  install_docker
  print_progress_bar 80
  install_docker_py
  print_progress_bar 90
  install_docker_compose
}

function install_salt_service() {
  ## Install service file
  if ! systemctl list-unit-files | log_command grep salt-minion.service; then {
      cat > /etc/systemd/system/rapyuta-agent.service <<- EOM

[Unit]
Description=Rapyuta Agent
After=network.target
Wants=rapyuta-dmclient.service rapyuta-telegraf.service rapyuta-supervisor.service
[Service]
Type=simple
NotifyAccess=all
LimitNOFILE=8192
OOMScoreAdjust=-700
CPUShares=2048
CPUWeight=200
Restart=on-failure
ExecStart=$RAPYUTA_VENV/bin/salt-minion

[Install]
WantedBy=multi-user.target
EOM
  } fi
}

function add_salt_config_and_keys() {
    mkdir -p /etc/salt/pki/minion/ &&  mkdir -p /etc/salt/minion.d && mkdir -p /etc/rapyuta
    mkdir -p /var/log/rapyuta/deployments && mkdir -p /opt/rapyuta/supervisor
    ## Write the config files
    cat  > /etc/salt/pki/minion/minion.pem <<- EOM
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA6GGZUqTDXDfijuvLElaTj5w7FJAK5nJtevAfpnbm/haYoNBW
CXWkW2PtA5nUr2uFjyK1FexhJbvN4Vh1NLtidF2Tjw+teyMCxKrzXCxOKTOJzt4t
oW/sQeBtuTVAwvBFZsaSlPCsGB08CBHgcigTTCdR8/H3QMLZ9sOzJutoLiHJ0XWA
l1V2dLID2fOlcNfGASoJoTLFHKdlOlliZIv5hRG/HliOCfgYjbb5xrc9MiL41nx6
uw7Vi1LWgvU6bj5NFB0HUXgeA6jqObjg0ly38TSl43F3FRc5jS5SiLmtuA6RSN2h
C3YUoR4u6F8K0nX7Jnl6MincGuyxDdcxISGmzwIDAQABAoIBAHNDbeSTOx+zzJmt
lXWMIfc6vAdQB0gU+/7duiU8lwjzNlOV4wcgJhz6rKZ7mAZG4+GCiqXMMMehptYe
pUw5ofUsMTPlx9vrGsVoMfvHMiG3oaRNif6oYFywsFwMcQoAWbxHxI9B7WqsnYk3
LMgS3reITVsd6tFhlPGUUnl8jJlMUTL4Dp82vwuLZke1ZaJpdh2tj05vORjvdadR
mTkXpXZGPV2mMomNQMaW9tJCmndD5YGCSpUmTZ+La711ZsReMH9eY7Swxke+UWan
y4DLUxuu1F4lue7oo1CJRTivqX806QfwCGzUPiAjLNwEH4EnWAP5oGnPHQ7FAblB
mtcnp/kCgYEA8xEVTSDQqq5dmEeOXOJbPFhb4FE4GxjZMRbRsnX6KnccOX8hiGwC
W74ef1xPG1iAGeaLmd0hGQIQY3+SDBj9W7dGaGY0EKu5n8jLV3in3z0abcKU9oIm
eIYNcihuL9AYYfNhcfvD/fxs/Qq2ASkeTlCqEsAjhwN5S9PYBYWoWBUCgYEA9L72
z2HoB5m8mluUJ3FY7f8ez8t1YzETZg3Ax0LBu6qVfITgMC9CbopPuT4Q3nZ9/C7D
Yeou8/iZY7hyFkapRl8PYH/UBPXOAEW/GFYVzpuALe4c1ZcF78YZGwPzbfm9n4aO
HOTti/ks3AhB7mEoyuZ6Gry9oRyx9dBK+fzGuFMCgYBGSkJms36kXRgj2U2J/stz
f/nRvKsE6wKj931cplFZxmgbGHCSCuoDrc8T9ZXKyqUA2HK2ZAQWP0qN+244oWFj
DHUH68ZSq9ZaJq7m9LVXEUx7QTHit3B4mgt5X8e9e+gRK1iapbvfzweVhWtsmn9x
FlKYaYfcm1yQWQq3TheIoQKBgGrA6RLoF7dI/ZUuoN7bd/jHsP7eNiPAAkAfe5ju
q2ZaL74Sj181HfrtZXzdb6o5cRaQpzSMW1KbevyeNVU2GRvS1vg2iZpoRSSlR4cr
9XMbLLvcAsO/jh1aARVhkcrEhkuQ+2frCxpk44ZOK8P4qTxnb5c+AFDIHW+lHS8R
bPR1AoGBALdJGZZtOVAA/tWdSQ+8rcQn7daDhHfUVl28Iv/z1x/t+GY2G3nKNVEF
99WIYMiTWAz/aV7jZq2G083yEj+py8UnV9z3Ztt/ysbT5ik3rrsNDllfDaI2xkuq
VDTJ8AfpubgaoriQ0rBjIjY68cOrkNdqKMhOTb+mdZoW47f+U52m
-----END RSA PRIVATE KEY-----
EOM
    cat > /etc/salt/pki/minion/minion.pub  <<- EOM
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6GGZUqTDXDfijuvLElaT
j5w7FJAK5nJtevAfpnbm/haYoNBWCXWkW2PtA5nUr2uFjyK1FexhJbvN4Vh1NLti
dF2Tjw+teyMCxKrzXCxOKTOJzt4toW/sQeBtuTVAwvBFZsaSlPCsGB08CBHgcigT
TCdR8/H3QMLZ9sOzJutoLiHJ0XWAl1V2dLID2fOlcNfGASoJoTLFHKdlOlliZIv5
hRG/HliOCfgYjbb5xrc9MiL41nx6uw7Vi1LWgvU6bj5NFB0HUXgeA6jqObjg0ly3
8TSl43F3FRc5jS5SiLmtuA6RSN2hC3YUoR4u6F8K0nX7Jnl6MincGuyxDdcxISGm
zwIDAQAB
-----END PUBLIC KEY-----
EOM
    cat > /etc/salt/minion.d/rr_minion.conf  <<- EOM
master: gamaster.apps.rapyuta.io
id: 205d314e-2aef-4e3c-b683-ab83f8088f9b
grains:
  device_name: exam3
  tenant_id: PROJECT-project-oeenmructbpojivzwhehilvz
  emqtt_server: ssl://gaemqtt.apps.rapyuta.io:443
  emqtt_password: KO87SXHJ4BJI

startup_states: 'highstate'
ext_job_cache: 'highstate_complete'

log_level_logfile: debug

# reconnect configuration
master_tries: -1
auth_tries: 10
ping_interval: 60

retry_dns: 0

#tcp keepalive
tcp_keepalive: True
tcp_keepalive_idle: 30
tcp_keepalive_cnt: 3
tcp_keepalive_intvl: 10
EOM
    sed -i "/device_name:.*/a \ \ user: $(whoami)" /etc/salt/minion.d/rr_minion.conf
}

function install_python_deps () {
  deps=""
  case "$CPUARCH" in
  "$CPUARCH_AMD64")
    deps="$CRYPTO_AMD64_WHL $CFFI_AMD64_WHL $PYCRYPTO_AMD64_WHL $ZMQ_AMD64_WHL"
    ;;
  "$CPUARCH_ARM64")
    deps="$CRYPTO_ARM64_WHL $CFFI_ARM64_WHL $PYCRYPTO_ARM64_WHL $ZMQ_ARM64_WHL"
    ;;
  "$CPUARCH_ARM32")
    deps="$CRYPTO_ARM32_WHL $CFFI_ARM32_WHL $PYCRYPTO_ARM32_WHL $ZMQ_ARM32_WHL"
    ;;
  esac
  # lock pip version for salt. lock pyopenssl for cryptography wheel.
  deps="$deps pip==8.1.1 pyopenssl==0.15.1 $SALT_WHL"
  # all deps must be resolved together, ergo single pip command. deps must be separated by spaces.
  run_command pip install $deps
}

function install_salt() {
  rm -rf /etc/salt/ > /tmp/install_log 2>&1
  print_progress_bar 15
  install_python_deps
  print_progress_bar 40
  install_salt_service
  print_progress_bar 45
  add_salt_config_and_keys
  remove_grains
  print_progress_bar 50
}

function init_venv() {
  print_progress_bar 10
  rm -rf "$RAPYUTA_VENV"
  # putting LC_ALL=C to stop older pip versions from failing in case of invalid LC_ALL set by user
  LC_ALL=C run_command virtualenv -p "$PYTHON" --always-copy "$RAPYUTA_VENV"
  source "$RAPYUTA_VENV_ACT"
}

function deinit_venv() {
  # turn on global site-packages in venv; cloud_bridge and dm_client need to use rospy.
  # doing this here instead of using `--system-site-packages` because pip fails in some cases where system has
  # incompatible pyopenssl version.
  run_command rm "$RAPYUTA_VENV"/lib/python2.7/no-global-site-packages.txt
}

function start_rapyuta_agent() {
  ## Restart salt minion
  log_command systemctl daemon-reload
  add_timing_grains
  update_grains
  log_command systemctl restart rapyuta-agent
  log_command systemctl enable rapyuta-agent
  systemctl status rapyuta-agent 1>> /dev/null 2>> /dev/null
  if [ $? -ne 0 ] ; then
    echo 'Unable to start the agent, check install logs at /var/log/rapyuta_install_log and error logs at /var/log/rapyuta_error_log'
    exit -1;
  fi
}

function check_if_closedbeta_rapyuta() {
  if [ -f /etc/salt/minion.d/rr_minion.conf ]; then
    cat /etc/salt/minion.d/rr_minion.conf | grep -qe '^master: *closed-betamaster\.cb01\.rapyuta\.io'
    if [ $? -eq 0 ]; then
      echo "Older installation found on device. It must be removed before running this script."
      echo "Please uninstall it with the command: rapyuta-agent-uninstall"
      echo "If the above command is not available on your system please run: curl https://storage.googleapis.com/artifacts.rapyuta.io/closedbeta-rapyuta-agent-uninstall | bash"
      echo "Retry again after removing the older installation."
      exit -1
    fi
  fi
}

#Start
run_as_sudoer
if [[ $(check_init_manger systemd) == 0 ]]; then
  echo -ne "This device doesn't support systemd \n\n"
  exit -1;
fi

check_if_closedbeta_rapyuta
check_running_deployment

while getopts ":r:w:" OPTION
do
  case $OPTION in
    r)
      RUNTIME=$OPTARG
      ;;
    w)
      CATKIN_WS=$OPTARG
      ;;
  esac
done

case $RUNTIME in
	dockercompose)
		jobs+=("install_docker_runtime")
        add_grains "runtime" $RUNTIME
        add_rapyuta_image_token_in_grain
		;;
	preinstalled)
		add_grains "runtime" $RUNTIME
		;;
	*)
		echo "Invalid runtime"
        exit -1
		;;
esac
jobs+=("deinit_venv")

validate_and_set_cpuarch
validate_and_set_python
set_ros_workspace

echo -ne '\n'
echo "Installing the Rapyuta Platform"
echo -ne '\n'
print_progress_bar 0
run_jobs
start_rapyuta_agent
print_progress_bar 100
echo -ne '\n'
echo "Rapyuta Agent Installed! Install logs at /var/log/rapyuta_install_log and error logs at /var/log/rapyuta_error_log"
echo "Took $TOTAL_INSTALL_TIME sec to complete" >> $INSTALL_LOG_FILE